# This file is NOT licensed under the GPLv3, which is the license for the rest
# of YouCompleteMe.
#
# Here's the license text for this file:
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <http://unlicense.org/>

import os.path as p
import subprocess
import os
import ycm_core

DIR_OF_THIS_SCRIPT = p.abspath(p.dirname(__file__))
DIR_OF_THIRD_PARTY = p.join(DIR_OF_THIS_SCRIPT, 'third_party')

FLAGS = [
    '-x',
    'c++',
    '-Wall',
    '-std=c++17',
    '-I', '/opt/X11/include',
]

g_database = None


def DirectoryOfThisScript():
  return os.path.dirname(os.path.abspath(__file__))


# Set this to the absolute path to the folder (NOT the file!) containing the
# compile_commands.json file to use that instead of 'flags'. See here for
# more details: http://clang.llvm.org/docs/JSONCompilationDatabase.html
#
# You can get CMake to generate this file for you by adding:
#   set( CMAKE_EXPORT_COMPILE_COMMANDS 1 )
# to your CMakeLists.txt file.
#
# Most projects will NOT need to set this to anything; you can just change the
# 'flags' list of compilation flags. Notice that YCM itself uses that approach.
compilation_database_folder = DirectoryOfThisScript()

if os.path.exists(compilation_database_folder):
  g_database = ycm_core.CompilationDatabase(compilation_database_folder)
else:
  g_database = None

SOURCE_EXTENSIONS = ['.C', '.cpp', '.cxx', '.cc', '.c', '.m', '.mm']


def MakeRelativePathsInFlagsAbsolute(flags, working_directory):
  if not working_directory:
    return list(flags)
  new_flags = []
  make_next_absolute = False
  path_flags = ['-isystem', '-I', '-iquote', '--sysroot=']
  for flag in flags:
    new_flag = flag

    if make_next_absolute:
      make_next_absolute = False
      if not flag.startswith('/'):
        new_flag = os.path.join(working_directory, flag)

    for path_flag in path_flags:
      if flag == path_flag:
        make_next_absolute = True
        break

      if flag.startswith(path_flag):
        path = flag[len(path_flag):]
        new_flag = path_flag + os.path.join(working_directory, path)
        break

    if new_flag:
      new_flags.append(new_flag)
  return new_flags


def IsHeaderFile(filename):
  extension = os.path.splitext(filename)[1]
  return extension in ['.H', '.h', '.hxx', '.hpp', '.hh']


def GetCompilationInfoForFile(filename):
  # The compilation_commands.json file generated by CMake does not have entries
  # for header files. So we do our best by asking the db for flags for a
  # corresponding source file, if any. If one exists, the flags for that file
  # should be good enough.
  if IsHeaderFile(filename):
    basename = os.path.splitext(filename)[0]
    for extension in SOURCE_EXTENSIONS:
      replacement_file = basename + extension
      if os.path.exists(replacement_file):
        compilation_info = g_database.GetCompilationInfoForFile(
            replacement_file)
        if compilation_info.compiler_flags_:
          return compilation_info
    return None
  return g_database.GetCompilationInfoForFile(filename)


def FlagsForFile(filename, **kwargs):
  final_flags = {}
  if g_database:
    # Bear in mind that compilation_info.compiler_flags_ does NOT return a
    # python list, but a "list-like" StringVec object
    compilation_info = GetCompilationInfoForFile(filename)
    if not compilation_info:
      return None

    final_flags = MakeRelativePathsInFlagsAbsolute(
        compilation_info.compiler_flags_,
        compilation_info.compiler_working_dir_)

  else:
    relative_to = DirectoryOfThisScript()
    final_flags = MakeRelativePathsInFlagsAbsolute(FLAGS, relative_to)

  return {
      'flags': FLAGS,  # TODO(me): doesn't work for final_flags somehow.
      'do_cache': True
  }


def Settings(**kwargs):
  client_data = kwargs['client_data']
  flags_for_this_file = FlagsForFile(__file__)
  flags = {
      'interpreter_path': client_data['g:ycm_python_interpreter_path'],
      'sys_path': client_data['g:ycm_python_sys_path'] + [
          '/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/tensorflow',
      ],
  }
  flags.update(flags_for_this_file)
  return flags


def GetStandardLibraryIndexInSysPath(sys_path):
  for index, path in enumerate(sys_path):
    if p.isfile(p.join(path, 'os.py')):
      return index
  raise RuntimeError('Could not find standard library path in Python path.')


def PythonSysPath(**kwargs):
  sys_path = kwargs['sys_path']

  dependencies = [p.join(DIR_OF_THIS_SCRIPT, 'python'),
                  p.join(DIR_OF_THIRD_PARTY, 'requests-futures'),
                  p.join(DIR_OF_THIRD_PARTY, 'ycmd'),
                  p.join(DIR_OF_THIRD_PARTY, 'requests_deps', 'idna'),
                  p.join(DIR_OF_THIRD_PARTY, 'requests_deps', 'chardet'),
                  p.join(DIR_OF_THIRD_PARTY,
                         'requests_deps',
                         'urllib3',
                         'src'),
                  p.join(DIR_OF_THIRD_PARTY, 'requests_deps', 'certifi'),
                  p.join(DIR_OF_THIRD_PARTY, 'requests_deps', 'requests')]

  # The concurrent.futures module is part of the standard library on Python 3.
  interpreter_path = kwargs['interpreter_path']
  major_version = int(subprocess.check_output([
      interpreter_path, '-c', 'import sys; print( sys.version_info[ 0 ] )']
  ).rstrip().decode('utf8'))
  if major_version == 2:
    dependencies.append(p.join(DIR_OF_THIRD_PARTY, 'pythonfutures'))

  sys_path[0:0] = dependencies
  sys_path.insert(GetStandardLibraryIndexInSysPath(sys_path) + 1,
                  p.join(DIR_OF_THIRD_PARTY, 'python-future', 'src'))

  return sys_path
